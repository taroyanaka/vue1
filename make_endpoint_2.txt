エンドポイント制作(制作時刻 1430-1500)
環境は以下の通り
  const express = require('express');
  const sqlite = require('better-sqlite3');
  const crypto = require('crypto');
  const bodyParser = require('body-parser');
  const cors = require('cors');

  const app = express();
  app.use(bodyParser.json());
  app.use(cors());

  const port = 8000;
  app.listen(port, "0.0.0.0", () => {
      console.log(`App listening at http://localhost:${port}`);
  });

  const db = new sqlite('app8.db');

!!!エンドポイント作成
 注意事項
 hash化する(const hashUid = (uid) => require('crypto').createHash('sha256').update(uid).digest('hex');)
 try-catchでエラーハンドリング(1エンドポイント5行以内)
 1行目で受け取るparamsをデバッグのために全てconsole.log
 2行目でparamsをバリデーション
!!!テーブル設計(以下の通り)
users
 id, uid, created_at, updated_at
articles
 id, user_id, article, created_at, updated_at
mails
  id, article_id, mail, created_at, updated_at
likes
  id, user_id, article_id, created_at, updated_at
bookmarks
  id, user_id, article_id, created_at, updated_at
articles_tags
  id, article_id, tag_id, created_at, updated_at
tags
  id, name, created_at, updated_at
!!!それぞれのテーブルに対するCRUD対応表(それが対応するエンドポイント設計になる)を作る
=>基本的に全てのユーザーに対して紐づく全てをreadするget_allエンドポイントでのみreadを実装する(設計が大幅に容易になる)
=>基本的に全てのエンドポイント(get_all除く)にuidのパラメーターとそのチェックを必須とする
エンドポイント
read_allエンドポイント READはgetallエンドポイントでツリー構造のデータを取得
initエンドポイント
  drop if existsとcreate
insert_sampleエンドポイント
users
  create, delete
articles
  create, update, delete
mails
  create, update, delete
likes
  create, delete
bookmarks
  create, delete
articles_tags
  create, delete
tags
  create, delete
バリデーションルール明文化
        validate(article, type) {
          const validations = {
            form: () => {
              return (
                article.username.length >= 1 && article.username.length <= 20 &&
                article.tags.length >= 1 && article.tags.length <= 10 &&
                article.content.length >= 1 && article.content.length <= 100 &&
                this.validateEmail(article.email)
              );
            },
            email: () => this.validateEmail(article.email),
          };

          if (validations[type] && !validations[type]()) {
            alert('入力内容が無効です');
            return false;
          }
          return true;
        },
        validateEmail(email) {
          const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          return re.test(email);
        },
